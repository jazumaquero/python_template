# Project Information Section
[project]
name = "{{ cookiecutter.project_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.description }}"
authors = [
    {name ="{{ cookiecutter.author }}", email="{{ cookiecutter.email }}"},
]
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">={{ cookiecutter.python_version }}"
dependencies = [
    {% for dependency in cookiecutter._custom_dependencies.release %}
    "{{dependency.package}}{{dependency.version}}",
    {% endfor %}
]

# Entrypoints/Scripts Section
[project.scripts]
{{cookiecutter.project_name}} = "{{cookiecutter.package_name}}.main:main"

# Development Dependencies Section
[dependency-groups]
dev = [
    "pytest>=6.2.3",
    "pytest-cov>=4.0.0",
    "coverage[toml]>5.5",
    "ruff>=0.11.7",
    "xdoctest>=0.15.4",
    "mypy>=0.812",
    "typeguard>=2.12.0",
    "Pygments>=2.8.1",
    "Sphinx>=3.5.4",
    "sphinx-rtd-theme>=0.5.2",
    "myst-parser>=0.13.7",
    "gitchangelog>=3.0.4",
    {% for dependency in cookiecutter._custom_dependencies.development %}
    "{{dependency.package}}{{dependency.version}}",
    {% endfor %}
]

# Pytest Configuration Section (see more at https://docs.pytest.org/en/stable/reference.html#ini-options-ref)
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--verbose --xdoctest --junitxml .reports/junit/pytests-results.xml --cov-report term-missing "

# Coverage Configuration Section (see more at https://coverage.readthedocs.io/en/stable/config.html)
[tool.coverage.paths]
source = ["{{ cookiecutter.package_name }}", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.package_name }}"]

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.coverage.xml]
output = ".reports/coverage/coverage.xml"

[tool.coverage.html]
directory = ".reports/coverage-html/coverage.html"

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
packages = "{{ cookiecutter.package_name }}"
strict = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
junit_xml = ".reports/junit/mypy-results.xml"

[tool.ruff]
# Opinionated line-length (80 or 88 chars for each line is fine for vim,...but not too short for me)
line-length = 120
indent-width = 4
target-version = ["py{{ cookiecutter.python_version.replace('.', '') }}"]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "B", "Q"]
ignore = ["E203", "E265", "E401", "D104"]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.format]
# Like Black
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = ["{{cookiecutter.package_name}}", "/tests"]

[tool.hatch.build.targets.wheel.sources]
"tests" = "tests"